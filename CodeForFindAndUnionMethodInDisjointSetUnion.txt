#include<bits/stdc++.h>
using namespace std;

//find method without Path Compression
int find(int i, vector<int> &parent) {
    
    if(i == parent[i]) {
        return i;
    }
    return find(parent[i], parent);
    
}

//find method with Path Compression
int find(int i, vector<int> &parent) { 
    if(i == parent[i]) {
        return i;
    }
    return parent[i] = find(parent[i], parent);
}

//union method without rank implementation
void union(int x, int y, vector<int> &parent) {
    
    int x_parent = find(x, parent);
    int y_parent = find(y, parent);
    
    if(x_parent != y_parent) {
        parent[x_parent] = y_parent;
    }
}

//union method with rank implementation
void union(int x, int y, vector<int> &parent, vector<int> &rank) {
    int x_parent = find(x, parent);
    int y_parent = find(y, parent);
    
    if(x_parent == y_parent) return;
    
    if(rank[x_parent] > rank[y_parent]) {
        parent[y_parent] = x_parent;
    }
    else if(rank[y_parent] > rank[x_parent]) {
        parent[x_parent] = y_parent;
    }
    else if(rank[x_parent] == rank[y_parent]) {
        parent[y_parent] = x_parent;
        rank[x_parent]++;
    }
}

int main() {
    
    return 0;
}
