// O(n2) Solution

#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL]:- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}
void levelOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    while(!q.empty()) {
        node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}
int height(node* root) {
    if(root == NULL) {
        return 0;
    }
    int left = height(root->left);
    int right = height(root->right);
    
    int ans = max(left, right) + 1;
    
    return ans;
}
bool checkBalancedTree(node* root) {
    if(root == NULL) {
        return true;
    }
    bool left = checkBalancedTree(root->left);
    bool right = checkBalancedTree(root->right);
    
    bool diff = abs(height(root->left) - height(root->right)) <= 1;
    
    if(left && right && diff) {
        return true;
    }
    
    return false;
}
int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<"Level order traversal is :- ";
    levelOrder(updatedRoot);
    cout<<endl<<"Balanced Tree ? ";
    bool result = checkBalancedTree(updatedRoot);
    if(result) {
        cout<<"True !!";
    }
    else {
        cout<<"False !!";
    }
    
    return 0;
}

// O(n) Solution

#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL]:- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}
void levelOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    while(!q.empty()) {
        node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}
int solve(node* root) {
    if(root == NULL) {
        return 0;
    }
    int l = solve(root->left);
    int r = solve(root->right);
    
    if(abs(l - r) > 1) return 0;
    
    return max(l, r) + 1;
}
bool checkBalancedTree(node* root) {
    bool result = solve(root);
    return result;
}
int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<"Level order traversal is :- ";
    levelOrder(updatedRoot);
    cout<<endl<<"Balanced Tree ? ";
    bool result = checkBalancedTree(updatedRoot);
    if(result) {
        cout<<"True !!";
    }
    else {
        cout<<"False !!";
    }
    
    return 0;
}
