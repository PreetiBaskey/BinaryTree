#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}
void bottomView(node* root) {
    if(root == NULL) {
        return;
    }
    queue<pair<node*, int>> q;
    q.push({root, 0});
    map<int, int> m;
    while(!q.empty()) {
        node* front_node = q.front().first;
        int front_pos = q.front().second;
        q.pop();
        m[front_pos] = front_node->data;
        if(front_node->left != NULL) {
            q.push({front_node->left, front_pos - 1});
        }
        if(front_node->right != NULL) {
            q.push({front_node->right, front_pos + 1});
        }
    }
    map<int, int> :: iterator it;
    for(it = m.begin(); it != m.end(); ++it) {
        cout<<it->second<<" ";
    }
}
int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<"Bottom view of binary tree :- ";
    bottomView(updatedRoot);
    
    return 0;
}







//GeeksForGeeks version of bottom view of binary tree
/*
class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
    vector<int> bottomView(Node *root) {
        if(root == NULL) {
            return {};
        }
        vector<int> result;
        map<int, int> bottomNodes; //horizontal distance(hd), node
        queue<pair<Node*, int>> q; //node, horizontal distance(hd)
        q.push({root, 0});
        while(!q.empty()) {
            Node* frontNode = q.front().first;
            int hd = q.front().second;
            q.pop();
            
            bottomNodes[hd] = frontNode->data;
            
            if(frontNode->left != NULL) {
                q.push({frontNode->left, hd - 1});
            }
            if(frontNode->right != NULL) {
                q.push({frontNode->right, hd + 1});
            }
        }
        for(auto &data: bottomNodes) {
            result.push_back(data.second);
        }
        
        return result;
    }
};
