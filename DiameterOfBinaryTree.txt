#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}
void levelOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    while(!q.empty()) {
        node* front_node = q.front();
        cout<<front_node->data<<" ";
        q.pop();
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}

int solve(node* root, int &result) {
    if(root == NULL) {
        return 0;
    }
    
    int ld = solve(root->left, result);
    int rd = solve(root->right, result);
    
    result = max(result, ld + rd);
    
    return max(ld, rd) + 1;
}

int DiameterOfBinaryTree(node* root) {
    
    if(root == NULL) {
        return 0;
    }
    
    int result = INT_MIN;
    
    solve(root, result);
    
    return result;
}
int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<"Level Order traversal is :- ";
    levelOrder(updatedRoot);
    int finalResult = DiameterOfBinaryTree(updatedRoot);
    cout<<endl<<"Diameter of binary tree is :- "<<finalResult;
    
    return 0;
}







// LeetCode version of diameter of binary tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root, int &result) {
        if(root == NULL) {
            return 0;
        }
        int left = solve(root->left, result);
        int right = solve(root->right, result);

        result = max(result, left + right);

        return max(left, right) + 1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root == NULL) {
            return 0;
        }
        int result = 0;
        solve(root, result);

        return result;
    }
};
