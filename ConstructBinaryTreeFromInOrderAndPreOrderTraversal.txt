#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
Node* createTree(Node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new Node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}
void inOrderTraversal(Node* root, vector<int> &result) {
    if(root == NULL) {
        return;
    }
    inOrderTraversal(root->left, result);
    result.push_back(root->data);
    inOrderTraversal(root->right, result);
}
void preOrderTraversal(Node* root, vector<int> &result) {
    if(root == NULL) {
        return;
    }
    result.push_back(root->data);
    preOrderTraversal(root->left, result);
    preOrderTraversal(root->right, result);
}
Node* solve(vector<int> &inOrder, vector<int> &preOrder, int start, int end, int &idx) {
    if(start > end) {
        return NULL;
    }
    int rootValue = preOrder[idx];
    int i = start;
    for(; i <= end; i++) {
        if(inOrder[i] == rootValue) {
            break;
        }
    }
    idx++;
    Node* root = new Node(rootValue);
    root->left = solve(inOrder, preOrder, start, i - 1, idx);
    root->right = solve(inOrder, preOrder, i + 1, end, idx);
    
    return root;
}
void levelOrderTraversal(Node* root) {
    if(root == NULL) {
        return;
    }
    queue<Node*> q;
    q.push(root);
    while(!q.empty()) {
        Node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}
int main() {
    
    Node* root = NULL;
    Node* updatedRoot = createTree(root);
    
    cout<<"InOrder traversal is :- ";
    vector<int> inOrder;
    inOrderTraversal(updatedRoot, inOrder);
    for(auto data: inOrder) {
        cout<<data<<" ";
    }
    
    cout<<endl<<"PreOrder traversal is :- ";
    vector<int> preOrder;
    preOrderTraversal(updatedRoot, preOrder);
    for(auto data: preOrder) {
        cout<<data<<" ";
    }
    
    int N = inOrder.size();
    int idx = 0;
    Node* newRoot = solve(inOrder, preOrder, 0, N - 1, idx);
    cout<<endl<<"Level Order traversal is :- ";
    levelOrderTraversal(newRoot);
    
    return 0;
}





//LeetCode version of construct binary tree from inorder and preorder, Question no - 105, Time complexity - O(n2), Space Complexity - O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createTree(vector<int> &preorder, vector<int> &inorder, int start, int end, int &idx) {
        if(start > end) {
            return NULL;
        }

        int rootVal = preorder[idx];
        int i = start;
        for(; i < end; i++) {
            if(inorder[i] == rootVal) {
                break;
            }
        }
        idx++;
        TreeNode* root = new TreeNode(rootVal);
        root->left = createTree(preorder, inorder, start, i - 1, idx);
        root->right = createTree(preorder, inorder, i + 1, end, idx);

        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size() == 0 || inorder.size() == 0) {
            return NULL;
        }

        int n = preorder.size();
        int idx = 0;

        return createTree(preorder, inorder, 0, n - 1, idx);
    }
};
