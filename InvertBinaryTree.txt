#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter data for -1] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}
void levelOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    while(!q.empty()) {
        node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}
node* invertBinaryTree(node* root) {
    if(root == NULL) {
        return NULL;
    }
    node* l = invertBinaryTree(root->left);
    node* r = invertBinaryTree(root->right);
    
    root->left = r;
    root->right = l;
    
    return root;
}
int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<"Level order traversal is :- ";
    levelOrder(updatedRoot);
    cout<<endl<<"Inverted Binary tree !!";
    node* newRoot = invertBinaryTree(updatedRoot);
    cout<<endl<<"Level order traversal is :- ";
    levelOrder(newRoot);
    
    return 0;
}







// LeetCode version of invert a binary tree - Question no - 226
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root == NULL) {
            return NULL;
        }
        invertTree(root->left);
        invertTree(root->right);

        TreeNode* tempNode = root->left;
        root->left = root->right;
        root->right = tempNode;

        return root;
    }
};
