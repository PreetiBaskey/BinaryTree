#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}

void levelOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    while(!q.empty()) {
        node* front_node = q.front();
        cout<<front_node->data<<" ";
        q.pop();
        if(front_node->left != NULL)
            q.push(front_node->left);
        if(front_node->right != NULL) 
            q.push(front_node->right);
    }
}

int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<endl<<"Level order traversal is :- ";
    levelOrder(updatedRoot);
    
    return 0;
}


// leetcode version of level order traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> getLevelOrder(TreeNode* root) {
        if(root == NULL) {
            return {};
        }
        vector<vector<int>> result;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            int size = q.size();
            vector<int> internal;
            while(size--) {
                TreeNode* frontNode = q.front();
                q.pop();
                internal.push_back(frontNode->val);
                if(frontNode->left != NULL) q.push(frontNode->left);
                if(frontNode->right != NULL) q.push(frontNode->right);
            }
            result.push_back(internal);
        }

        return result;
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        
        return getLevelOrder(root);

    }
};
