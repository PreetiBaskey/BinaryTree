#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}

void levelOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    while(!q.empty()) {
        node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}

void zigzag(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    bool leftToRight = true;
    vector<int> result;
    
    while(!q.empty()) {
        int size = q.size();
        vector<int> ans(size);
        
        for(int i = 0; i < size; i++) {
            node* front_node = q.front();
            q.pop();
            int index = leftToRight ? i : size - i - 1;
            ans[index] = front_node->data;
            
            if(front_node->left != NULL) {
                q.push(front_node->left);
            }
            if(front_node->right != NULL) {
                q.push(front_node->right);
            }
        }
        for(auto data: ans) {
            result.push_back(data);
        }
        leftToRight = !leftToRight;
    }
    
    for(auto data: result) {
        cout<<data<<" ";
    }
}

void traverseLeft(node* root, vector<int> &ans) {
    if((root == NULL) || (root->left == NULL && root->right == NULL))  {
        return;
    }
    ans.push_back(root->data);
    if(root->left != NULL) {
        traverseLeft(root->left, ans);
    }
    else {
        traverseLeft(root->right, ans);
    }
}

void traverseLeaf(node* root, vector<int> &ans) {
    if(root == NULL) {
        return;
    }
    if(root->left == NULL && root->right == NULL) {
        ans.push_back(root->data);
        return;
    }
    traverseLeaf(root->left, ans);
    traverseLeaf(root->right, ans);
}

void traverseRight(node* root, vector<int> &ans) {
    if((root == NULL) || (root->left == NULL && root->right == NULL))  {
        return;
    }
    if(root->right != NULL) {
        traverseRight(root->right, ans);
    }
    else {
        traverseRight(root->left, ans);
    }
    ans.push_back(root->data);
}

void boundaryTraversal(node* root) {
    if(root == NULL) {
        return;
    }
    vector<int> ans;
    ans.push_back(root->data);
    traverseLeft(root->left, ans);
    traverseLeaf(root->left, ans);
    traverseLeaf(root->right, ans);
    traverseRight(root->right, ans);
    
    for(auto data: ans) {
        cout<<data<<" ";
    }
}


int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<"Boundary traversal is :- ";
    boundaryTraversal(updatedRoot);
    
    return 0;
}
