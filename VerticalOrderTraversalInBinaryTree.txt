#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}
void levelOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);

    while(!q.empty()) {
        node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}
void verticalOrder(node* root) {
    if(root == NULL) {
        return;
    }
    map<int, vector<int>> m;
    queue<pair<node*, int>> q; 
    //1st agrs->node, 2nd args->position
    q.push({root, 0});
    while(!q.empty()) {
        node* front_node = q.front().first;
        int front_pos = q.front().second;
        q.pop();
        m[front_pos].push_back(front_node->data);
        if(front_node->left != NULL) {
            q.push({front_node->left, front_pos - 1});
        }
        if(front_node->right != NULL) {
            q.push({front_node->right, front_pos + 1});
        }
    }
    
    map<int, vector<int>> :: iterator it;
    for(it = m.begin(); it != m.end(); ++it) {
        for(auto data: (*it).second) {
            cout<<data<<" ";
        }
    }
    
}

int main() {
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<"LevelOrder traversal is :- ";
    levelOrder(updatedRoot);
    cout<<endl<<"VerticalOrder traversal is :- ";
    verticalOrder(updatedRoot);
    
    return 0;
}



// Leetcode version code - Problem No - 987
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {

        if(root == NULL) {
            return {};
        }
        vector<vector<int>> result;
        map<int, map<int, vector<int>>> m; // horizontal distance, level, list of nodes
        queue<pair<TreeNode*, pair<int, int>>> q; // root, horizontal distance, level
        q.push({root, {0, 0}});
        while(!q.empty()) {
            TreeNode* frontNode = q.front().first;
            int hd = q.front().second.first;
            int lvl = q.front().second.second;
            q.pop();
            m[hd][lvl].push_back(frontNode->val);
            if(frontNode->left != NULL) {
                q.push({frontNode->left, {hd - 1, lvl + 1}});
            }
            if(frontNode->right != NULL) {
                q.push({frontNode->right, {hd + 1, lvl + 1}});
            }
        }

        for(auto &col: m) {
            vector<int> tempLevelData;
            for(auto &level: col.second) {
                sort(level.second.begin(), level.second.end());
                tempLevelData.insert(tempLevelData.end(), level.second.begin(), level.second.end());
            }
            result.push_back(tempLevelData);
        }


        return result;
    }
};
