#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter data for -1] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}
void levelOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    while(!q.empty()) {
        node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}
node* replaceWithDepth(node* root, int level) {
    
    if(root == NULL) {
        return NULL;
    }
    root->data = level;
    
    replaceWithDepth(root->left, level + 1);
    replaceWithDepth(root->right, level + 1);
    
    return root;
    
}
int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<"Level order traversal is :- ";
    levelOrder(updatedRoot);
    cout<<endl<<"Node data is replaced with it's depth !!";
    node* newRoot = replaceWithDepth(updatedRoot, 0);
    cout<<endl<<"Level order traversal is :- ";
    levelOrder(newRoot);
    
    return 0;
}







// BFS Approach of replace nodes with depth - time complexity - O(n), space complexity - O(n)
#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

Node* createTree(Node* root) {
    int data;
    cout<<"Enter data :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new Node(data);
    cout<<"Enter left data of :- "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of :- "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}

Node* replaceNodesFromDepth(Node* root) {
    if(root == NULL) {
        return NULL;
    }
    queue<pair<Node*, int>> q; // node, leve
    q.push({root, 0});
    while(!q.empty()) {
        int size = q.size();
        while(size--) {
            Node* frontNode = q.front().first;
            int lvl = q.front().second;
            q.pop();
            
            frontNode->data = lvl;
            
            if(frontNode->left != NULL) {
                q.push({frontNode->left, lvl + 1});
            }
            if(frontNode->right != NULL) {
                q.push({frontNode->right, lvl + 1});
            }
        }
    }
    
    return root;
}

vector<int> levelOrderTraversal(Node* root) {
    if(root == NULL) {
        return {};
    }
    vector<int> result;
    queue<Node*> q;
    q.push(root);
    while(!q.empty()) {
        int size = q.size();
        while(size--) {
            Node* frontNode = q.front();
            q.pop();
            result.push_back(frontNode->data);
            
            if(frontNode->left != NULL) {
                q.push(frontNode->left);
            }
            if(frontNode->right != NULL) {
                q.push(frontNode->right);
            }
        }
    }
    
    return result;
}

int main() {
    
    Node* root = NULL;
    Node* updatedRoot = createTree(root);
    cout<<"Nodes are replaced with depth :- ";
    Node* newTree = replaceNodesFromDepth(updatedRoot);
    vector<int> result = levelOrderTraversal(newTree);
    for(int &data: result) {
        cout<<data<<" ";
    }
    
    return 0;
}
