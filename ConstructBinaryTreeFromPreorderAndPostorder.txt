//Optimized Code - LeetCode version of construct binary tree from preorder and postorder traversal, Problem no - 889, Time complexity - O(n), Space Complexity - O(n)(system stack space, no auxiliary space)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createTree(int preStart, int postStart, int preEnd, vector<int> &preorder, vector<int> &postorder, unordered_map<int, int> m) {
        if(preStart > preEnd) {
            return NULL;
        }

        TreeNode* root = new TreeNode(preorder[preStart]);
        if(preStart == preEnd) {
            return root;
        }
        int nextVal = preorder[preStart + 1];
        int j = m[nextVal];

        int num = j - postStart + 1;

        root->left = createTree(preStart + 1, postStart, preStart + num, preorder, postorder, m);
        root->right = createTree(preStart + num + 1, j + 1, preEnd, preorder, postorder, m);

        return root;
    }
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        int n = preorder.size();
        unordered_map<int, int> m;
        for(int i = 0; i < n; i++) {
            m[postorder[i]] = i;
        }

        return createTree(0, 0, n - 1, preorder, postorder, m);
    }
};






//Brute force Approach/Code - LeetCode version of construct binary tree from preorder and postorder traversal, Problem no - 889, Time complexity - O(n2), Space Complexity - O(n)(system stack space, no auxiliary space)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createTree(int preStart, int postStart, int preEnd, vector<int> &preorder, vector<int> &postorder) {
        if(preStart > preEnd) {
            return NULL;
        }

        TreeNode* root = new TreeNode(preorder[preStart]);
        if(preStart == preEnd) {
            return root;
        }
        int nextVal = preorder[preStart + 1];
        int j = postStart;
        while(postorder[j] != nextVal) {
            j++;
        }
        int num = j - postStart + 1;

        root->left = createTree(preStart + 1, postStart, preStart + num, preorder, postorder);
        root->right = createTree(preStart + num + 1, j + 1, preEnd, preorder, postorder);

        return root;
    }
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
           int n = preorder.size();
           
           return createTree(0, 0, n - 1, preorder, postorder);
    }
};
