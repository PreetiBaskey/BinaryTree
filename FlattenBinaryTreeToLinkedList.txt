//Time complexity - O(n), Space complexity(Auxiliary Space) - O(1), Recursion Stack space - O(nlogn) if balance tree and O(n) if skewed tree 
//LeetCode no - 114
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* flattenBT(TreeNode* root) {
        if(root == NULL) {
            return NULL;
        }
        TreeNode* leftHand = flattenBT(root->left);
        TreeNode* rightHand = flattenBT(root->right);

        if(leftHand != NULL) {
            TreeNode* temp = leftHand;
            while(temp != NULL && temp->right != NULL) {
                temp = temp->right;
            }
            temp->right = rightHand;
            root->right = leftHand;
            root->left = NULL;
        }
        else {
            root->right = rightHand;
        }

        return root;
    }
    void flatten(TreeNode* root) {
        flattenBT(root);
    }
};
