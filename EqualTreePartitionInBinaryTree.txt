#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

Node* createTree(Node* root) {
    int data;
    cout<<"Enter data :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new Node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
}

int findSumOfTreeNodes(Node* root) {
    if(root == NULL) {
        return 0;
    }
    return root->data + findSumOfTreeNodes(root->left) + findSumOfTreeNodes(root->right);
}
void check(Node* root, int target, bool &result) {
    if(root == NULL) {
        return;
    }
    int sum = root->data + findSumOfTreeNodes(root->left) + findSumOfTreeNodes(root->right);
    if(sum == target) {
        result = true;
    }
    
    check(root->left, target, result);
    check(root->right, target, result);      
}
bool isEquallyPartition(Node* root) {
    if(root == NULL) {
        return false;
    }
    int sum = findSumOfTreeNodes(root);
    if(sum % 2 != 0) {
        return false;
    }
    bool result = false;
    check(root, sum/2, result);
    
    return result;
}

int main() {
    Node* root = NULL;
    Node* updatedRoot = createTree(root);
    bool result = isEquallyPartition(updatedRoot);
    if(result) {
        cout<<"Tree can be equally partitioned!";
    }
    else {
        cout<<"Tree can not be equally partitioned!";
    }
    
    return 0;
}
