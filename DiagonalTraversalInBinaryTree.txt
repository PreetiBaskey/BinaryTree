#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
node* createTree(node* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new node(data);
    cout<<"Enter left data of "<<data<<endl;
    root->left = createTree(root->left);
    cout<<"Enter right data of "<<data<<endl;
    root->right = createTree(root->right);
    
    return root;
    
}
void inOrder(node* root) {
    if(root == NULL) {
        return;
    }
    inOrder(root->left);
    cout<<root->data<<" ";
    inOrder(root->right);
}
void diagonalOrder(node* root) {
    if(root == NULL) {
        return;
    }
    queue<node*> q;
    q.push(root);
    vector<int> ans;
    while(!q.empty()) {
        node* root = q.front();
        q.pop();
        while(root) {
            if(root->left != NULL) {
                q.push(root->left);
            }
            ans.push_back(root->data);
            root = root->right;
        }
    }
    for(auto data: ans) {
        cout<<data<<" ";
    }
}
int main() {
    
    node* root = NULL;
    node* updatedRoot = createTree(root);
    cout<<endl<<"Diagonal traversal is :- ";
    diagonalOrder(updatedRoot);
    
    return 0;
}



// GeeksForGeeks version of Diagonal traversal of binary tree
/* A binary tree node
struct Node
{
    int data;
    Node* left, * right;
}; */

class Solution {
  public:
    vector<int> diagonal(Node *root) {
        if(root == NULL) {
            return {};
        }
        vector<int> result;
        queue<Node*> q;
        q.push(root);
        while(!q.empty()) {
            Node* frontNode = q.front();
            q.pop();
            while(frontNode) {
                if(frontNode->left != NULL) {
                    q.push(frontNode->left);
                }
                result.push_back(frontNode->data);
                frontNode = frontNode->right;
            }
        }
        
        return result;
    }
};
